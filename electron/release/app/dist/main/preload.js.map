{"version":3,"file":"preload.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,QAAQ,I,mBCRX,IAAIC,EAAsB,CCA1BA,EAAyBP,IACH,oBAAXQ,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeX,EAASQ,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeX,EAAS,aAAc,CAAEY,OAAO,GAAO,G,YCL9D,MAAM,EAA+BC,QAAQ,YCOvCC,EAAkB,ICHxB,CACEC,MAAO,CACLC,IAAIC,GACK,EAAAC,YAAYC,SAAS,qBAAsBF,GAEpDG,IAAIC,EAAUC,GACZ,EAAAJ,YAAYK,KAAK,qBAAsBF,EAAUC,EACnD,IDFFJ,YAAa,CACXM,mBAAmBC,GACjB,EAAAP,YAAYM,mBAAmBC,EACjC,EACAC,YAAYD,KAAsBE,GAChC,EAAAT,YAAYK,KAAKE,KAAYE,EAC/B,EACAC,GAAGH,EAAmBI,GACpB,MAAMC,EAAe,CAACC,KAA6BJ,IACjDE,KAAQF,GAGV,OAFA,EAAAT,YAAYU,GAAGH,EAASK,GAEjB,KACL,EAAAZ,YAAYc,eAAeP,EAASK,EAAa,CAErD,EACAG,KAAKR,EAAmBI,GACtB,EAAAX,YAAYe,KAAKR,GAAS,CAACM,KAAWJ,IAASE,KAAQF,IACzD,I,OAIJ,EAAAO,cAAcC,kBAAkB,WAAYrB,G","sources":["webpack://battery-notifier/webpack/universalModuleDefinition","webpack://battery-notifier/webpack/bootstrap","webpack://battery-notifier/webpack/runtime/make namespace object","webpack://battery-notifier/external node-commonjs \"electron\"","webpack://battery-notifier/./src/main/preload.ts","webpack://battery-notifier/./src/shared/electron/store/electronStorePreload.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","// Disable no-unused-vars, broken for spread args\n/* eslint no-unused-vars: off */\nimport { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron';\nimport electronStorePreload from '../shared/electron/store/electronStorePreload';\n\nexport type Channels = 'get-devices' | 'receive-devices';\n\nconst electronHandler = {\n  ...electronStorePreload,\n  ipcRenderer: {\n    removeAllListeners(channel: Channels) {\n      ipcRenderer.removeAllListeners(channel)\n    },\n    sendMessage(channel: Channels, ...args: unknown[]) {\n      ipcRenderer.send(channel, ...args);\n    },\n    on(channel: Channels, func: (...args: unknown[]) => void) {\n      const subscription = (_event: IpcRendererEvent, ...args: unknown[]) =>\n        func(...args);\n      ipcRenderer.on(channel, subscription);\n\n      return () => {\n        ipcRenderer.removeListener(channel, subscription);\n      };\n    },\n    once(channel: Channels, func: (...args: unknown[]) => void) {\n      ipcRenderer.once(channel, (_event, ...args) => func(...args));\n    },\n  },\n};\n\ncontextBridge.exposeInMainWorld('electron', electronHandler);\n\nexport type ElectronHandler = typeof electronHandler;\n","import { ipcRenderer } from 'electron';\n\n// Load in main/preload.ts\n\nexport default {\n  store: {\n    get(key) {\n      return ipcRenderer.sendSync('electron-store-get', key);\n    },\n    set(property, val) {\n      ipcRenderer.send('electron-store-set', property, val);\n    },\n    // Other method you want to add like has(), reset(), etc.\n  },\n};\n"],"names":["root","factory","exports","module","define","amd","a","i","global","__webpack_require__","Symbol","toStringTag","Object","defineProperty","value","require","electronHandler","store","get","key","ipcRenderer","sendSync","set","property","val","send","removeAllListeners","channel","sendMessage","args","on","func","subscription","_event","removeListener","once","contextBridge","exposeInMainWorld"],"sourceRoot":""}